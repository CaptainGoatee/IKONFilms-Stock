/// <reference types="emscripten" />
import { S as DataCaptureEngine, U as Module, X as AnyDataCaptureActionMessage, Y as AugmentedWorker, Z as ModuleHandler, _ as DataCaptureCallbackMessage, $ as DataCaptureActionMessageKey, a0 as EngineWorkerResponse } from '../Camera-7b6f051d.js';
import '../private/Serializable.js';
import '../private/FrameReaders/WatermarkStack.js';
import '../tsHelper.js';
import '../Common.js';
import '../DataCaptureContextSettings.js';
import '../DataCaptureViewPlusRelated.js';
import '../ViewControls.js';
import '../private/CustomLocationsView.js';
import '../private/View.js';
import '../private/AnchorPositions.js';
import '../logger.js';
import '../LoadingStatus.js';

declare class WorkerMain<E extends DataCaptureEngine<M>, M extends Module> {
    dataCaptureInstance: E;
    onMessageListener: (event: MessageEvent<AnyDataCaptureActionMessage>) => boolean;
    private readonly workerSelf;
    constructor(workerSelf: AugmentedWorker<M>, module: ModuleHandler<M>);
    static isWorkerScope(maybeSelf: unknown): maybeSelf is Worker;
    listenToMessages(): void;
    postMessage(message: DataCaptureCallbackMessage, transfer?: Transferable[]): void;
    getOffscreenCanvas(): OffscreenCanvas | undefined;
    hasPayload(result: unknown): result is {
        payload: unknown;
    };
    hasTransferables(result: unknown): result is {
        transferables: Transferable[];
    };
    respondWith<C extends DataCaptureActionMessageKey>(command: C, requestId: number, executor: () => EngineWorkerResponse<C>): Promise<void>;
    /**
     * Messages received from the main thread (actions to undertake)
     */
    onMessage(event: MessageEvent<AnyDataCaptureActionMessage>): boolean;
}

export { WorkerMain };
