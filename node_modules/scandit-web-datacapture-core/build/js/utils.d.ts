/// <reference types="emscripten" />
declare function isObject(target: unknown): target is Record<string, any>;
declare function unknownErrorToString(error: unknown): string;
type Predicate<TInput> = (v: TInput) => boolean;
type Handler<TInput, TOutput> = (v: TInput) => TOutput;
interface Match<Input, Output> {
    when: (predicate: Predicate<Input>, handler: Handler<Input, Output>) => this;
    run: () => Output;
    otherwise: (handler: Handler<Input, Output>) => this;
}
declare function match<TInput, TOutput>(value: TInput): Match<TInput, TOutput>;
declare class Deferred<T> {
    promise: Promise<T>;
    resolve: (value: T) => void;
    reject: (reason: unknown) => void;
    constructor();
}

export { Deferred, isObject, match, unknownErrorToString };
