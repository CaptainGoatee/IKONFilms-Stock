/// <reference types="emscripten" />
import { Logger } from './logger.js';
export { WorkerMain } from './worker/WorkerMain.js';
export { Anchor, Color, ColorJSON, Direction, JSONType, MarginsWithUnit, MarginsWithUnitJSON, MeasureUnit, NumberWithUnit, NumberWithUnitJSON, Orientation, Point, PointJSON, PointWithUnit, PointWithUnitJSON, Quadrilateral, QuadrilateralJSON, Rect, RectJSON, RectWithUnit, RectWithUnitJSON, Size, SizeJSON, SizeWithAspect, SizeWithUnit, SizeWithUnitAndAspect, SizeWithUnitAndAspectJSON, SizeWithUnitJSON, SizingMode } from './Common.js';
import { D as DataCaptureLoader } from './Camera-7b6f051d.js';
export { g as Camera, m as CameraAccess, e as CameraJSON, C as CameraPosition, l as CameraSettings, i as CameraSettingsFromJSON, j as CameraSettingsJSON, h as CameraSettingsJSONBase, o as Change, G as ContextStatus, E as ContextStatusJSON, u as DataCaptureComponent, t as DataCaptureComponentJSON, A as DataCaptureContext, x as DataCaptureContextCreationOptions, y as DataCaptureContextJSON, B as DataCaptureContextListener, R as DataCaptureLoaderOptions, q as DataCaptureMode, r as DataCaptureModeJSON, I as DataCaptureOverlay, L as DataCaptureView, K as DataCaptureViewJSON, J as DataCaptureViewListener, n as DeviceCamera, F as FocusGestureStrategy, M as FrameData, a as FrameSource, d as FrameSourceJSON, c as FrameSourceListener, b as FrameSourceState, Q as OverrideState, P as PrivateChangeSet, s as PrivateDataCaptureComponent, w as PrivateDataCaptureContext, v as PrivateDataCaptureContextOptions, p as PrivateDataCaptureMode, z as PrivateFrameHandler, N as PrivateLoadableFrameData, H as PrivateMirrorAxis, T as TorchState, f as VideoFrameResolution, V as VideoResolution, O as convertToPublicFrameData, k as isCameraFrameSource } from './Camera-7b6f051d.js';
export { LoadingStatus, LoadingStatusSubscriber, ProgressInfo, default as loadingStatus } from './LoadingStatus.js';
export { DeepMutable, DeepPartial, DistributiveKeyOf, MethodSignature, Mutable, Optional, assert, assertUnreachable, assertUnreachableThrowException } from './tsHelper.js';
export { AnchorPositions, AnchorPositionsJSON } from './private/AnchorPositions.js';
export { BrowserHelper } from './browserHelper.js';
export { BrowserCompatibility, Feature } from './browserCompatibility.js';
export { DataCaptureContextSettings, DataCaptureContextSettingsJSON } from './DataCaptureContextSettings.js';
export { DataCaptureVersion } from './DataCaptureVersion.js';
export { FocusGesture, FocusGestureJSON, LogoStyle, SwipeToZoom, TapToFocus, ZoomGesture, ZoomGestureJSON } from './DataCaptureViewPlusRelated.js';
export { Feedback, FeedbackJSON, Sound, SoundJSON, Vibration, VibrationJSON } from './Feedback.js';
export { ImageFrameSource, ImageFrameSourceJSON } from './ImageFrameSource.js';
export { Localization } from './Localization.js';
export { LocationSelection, LocationSelectionJSON, PrivateNoneLocationSelection, RadiusLocationSelection, RectangularLocationSelection } from './LocationSelection.js';
export { Translations } from './translations.js';
export { SingleImageUploader, SingleImageUploaderJSON, SingleImageUploaderType } from './SingleImageUploader.js';
export { SingleImageUploaderSettings, SingleImageUploaderSettingsJSON } from './SingleImageUploaderSettings.js';
export { CameraFOVSwitchControl, CameraSwitchControl, Control, TorchSwitchControl } from './ViewControls.js';
export { NoViewfinder, Viewfinder } from './Viewfinder.js';
export { AimerViewfinderJSON, LaserlineViewfinderStyle, LaserlineViewfinderStyleJSON, PrivateLaserlineViewfinderDefault, PrivateRectangularViewfinderAnimation, PrivateRectangularViewfinderDefault, RectangularViewfinderAnimation, RectangularViewfinderJSON, RectangularViewfinderLineStyle, RectangularViewfinderStyle, ViewfinderJSON, ViewfinderType, ViewfinderTypeAimer, ViewfinderTypeLaserLine, ViewfinderTypeNone, ViewfinderTypeRectangular, ViewfinderTypeTargetAimer } from './ViewfinderPlusRelated.js';
export { LaserlineViewfinder } from './LaserlineViewfinder.js';
export { RectangularViewfinder } from './RectangularViewfinder.js';
export { AimerViewfinder } from './AimerViewfinder.js';
export { Brush, BrushJSON } from './Brush.js';
export { DataCaptureError, DataCaptureErrorDetails } from './DataCaptureError.js';
export { Deferred, isObject, match, unknownErrorToString } from './utils.js';
import './private/Serializable.js';
import './private/FrameReaders/WatermarkStack.js';
import './private/CustomLocationsView.js';
import './private/View.js';
import 'csstype';

type PrivateCaptureModuleName = "BarcodeCapture" | "IdCapture";
interface ModuleLoader {
    moduleName: string;
    load(options: ConfigureOptions): Promise<any>;
}
interface ConfigureOptions {
    licenseKey: string;
    libraryLocation: string;
    moduleLoaders: ModuleLoader[];
    logLevel?: Logger.Level;
    licenseDataPath?: string;
}
/**
 * @hidden
 *
 * Used by tests.
 */
declare function resetConfigure(): Promise<void>;
declare function configure(options: ConfigureOptions): Promise<void>;
/**
 * @hidden
 *
 * Used by tests.
 */
declare function setMainDataCaptureLoader(newLoader: DataCaptureLoader): void;

export { ConfigureOptions, DataCaptureLoader, Logger, ModuleLoader, PrivateCaptureModuleName, configure, resetConfigure, setMainDataCaptureLoader };
