import { DataCaptureLoader, DataCaptureLoaderOptions } from 'scandit-web-datacapture-core';
import { DataCaptureWorker, DataCaptureActionMessageKey, AnyDataCaptureActionMessage } from './dataCaptureWorkerRelated.js';
import 'scandit-web-datacapture-core/build/js/worker/index';
import '../BarcodeCaptureSession.js';
import '../Barcode.js';
import '../EncodingRange.js';
import '../StructuredAppendData.js';
import '../LocalizedOnlyBarcode.js';
import '../BarcodeTrackingSession.js';
import '../TrackedBarcode.js';
import '../SparkScanViewVisualFeedback-9e0f483a.js';
import 'scandit-web-datacapture-core/build/js/private/Serializable';
import '../ScanIntention.js';
import '../SymbologySettings.js';
import '../SparkScanViewHandMode-b5686d15.js';

type CommandAndPayload<A, C> = A extends {
    command: C;
} ? A : never;
type WorkerCommandPayload<C> = Omit<CommandAndPayload<AnyDataCaptureActionMessage, C>, "command" | "id">;
declare class BarcodeCaptureWorkerManager extends DataCaptureLoader {
    protected _dataCaptureWorker?: DataCaptureWorker;
    get dataCaptureWorker(): DataCaptureWorker;
    protected get name(): string;
    static create(options: DataCaptureLoaderOptions): Promise<BarcodeCaptureWorkerManager>;
    workerCommand<C extends DataCaptureActionMessageKey>(command: C, payload: WorkerCommandPayload<C>, transferables?: Transferable[]): Promise<any>;
}

export { BarcodeCaptureWorkerManager };
