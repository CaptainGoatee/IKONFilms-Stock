import { PrivateLoadableFrameData } from 'scandit-web-datacapture-core';
import { DataCaptureActionMessageKey as DataCaptureActionMessageKey$1, WorkerResponse as WorkerResponse$1, AnyDataCaptureActionMessage as AnyDataCaptureActionMessage$1, DataCaptureCallbackMessage as DataCaptureCallbackMessage$1, Module as Module$1, CaptureModeDeserializerInstance, JSONParseable, WasmFrameData, EmscriptenClassHandle, DataCaptureCallbackMessageKeys as DataCaptureCallbackMessageKeys$1 } from 'scandit-web-datacapture-core/build/js/worker/index';
import { BarcodeCaptureSessionJSON } from '../BarcodeCaptureSession.js';
import { BarcodeTrackingSessionJSON } from '../BarcodeTrackingSession.js';
import { TrackedBarcodeJSON } from '../TrackedBarcode.js';
import { h as SparkScanSessionJSON } from '../SparkScanViewVisualFeedback-9e0f483a.js';
import '../Barcode.js';
import '../EncodingRange.js';
import '../StructuredAppendData.js';
import '../LocalizedOnlyBarcode.js';
import 'scandit-web-datacapture-core/build/js/private/Serializable';
import '../ScanIntention.js';
import '../SymbologySettings.js';
import '../SparkScanViewHandMode-b5686d15.js';

/**
 * MESSAGES (ACTIONS) SENT TO THE WORKER
 */
type DataCaptureActionMessageKey = DataCaptureActionMessageKey$1;
type WorkerResponse<C extends DataCaptureActionMessageKey> = WorkerResponse$1<C>;
type AnyDataCaptureActionMessage = AnyDataCaptureActionMessage$1;
/**
 * MESSAGES EMITTED BY THE WORKER
 */
type DataCaptureCallbackMessageKeys = DataCaptureCallbackMessageKeys$1 | "barcodeCaptureDidScan" | "barcodeCaptureDidUpdateSession" | "barcodeTrackingDidUpdateSession" | "didTapTrackedBarcode" | "sparkScanDidScan" | "sparkScanDidUpdateSession";
interface BaseDataCaptureCallbackMessage {
    type: DataCaptureCallbackMessageKeys;
}
interface BarcodeCaptureDidScanWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeCaptureDidScan";
    payload: {
        session: BarcodeCaptureSessionJSON;
        frameData: PrivateLoadableFrameData;
    };
}
interface BarcodeCaptureDidUpdateSessionWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeCaptureDidUpdateSession";
    payload: BarcodeCaptureSessionJSON;
}
interface BarcodeTrackingDidTapTrackedBarcode extends BaseDataCaptureCallbackMessage {
    type: "didTapTrackedBarcode";
    payload: TrackedBarcodeJSON;
}
interface BarcodeTrackingDidUpdateSessionWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "barcodeTrackingDidUpdateSession";
    payload: BarcodeTrackingSessionJSON;
}
interface SparkScanDidScanWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "sparkScanDidScan";
    payload: {
        session: SparkScanSessionJSON;
        frameData: PrivateLoadableFrameData;
    };
}
interface SparkScanDidUpdateSessionWorkerMessage extends BaseDataCaptureCallbackMessage {
    type: "sparkScanDidUpdateSession";
    payload: SparkScanSessionJSON;
}
type DataCaptureCallbackMessage = BarcodeCaptureDidScanWorkerMessage | BarcodeCaptureDidUpdateSessionWorkerMessage | BarcodeTrackingDidTapTrackedBarcode | BarcodeTrackingDidUpdateSessionWorkerMessage | DataCaptureCallbackMessage$1 | SparkScanDidScanWorkerMessage | SparkScanDidUpdateSessionWorkerMessage;
/**
 * OTHERS
 */
type PayloadForCommand<A, C> = A extends {
    command: C;
} ? A : never;
interface DataCaptureWorker extends Omit<Worker, "postMessage"> {
    onmessage: ((this: Worker, event_: MessageEvent & {
        data: any;
    }) => void) | null;
    postMessage: <C extends AnyDataCaptureActionMessage["command"]>(message: PayloadForCommand<AnyDataCaptureActionMessage, C>, transfer?: Transferable[]) => void;
}
interface BarcodeCaptureModule extends Module$1 {
    BarcodeCaptureDeserializer: new () => CaptureModeDeserializerInstance;
    BarcodeCaptureListener: {
        extend: (target: "BarcodeCaptureListener", parameters: {
            didScan: (barcode_capture: any, session: JSONParseable, frame_data: WasmFrameData) => void;
            didUpdateSession: (barcode_capture: any, session: JSONParseable, frame_data: any) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeCaptureDeserializerListener: {
        extend: (target: "BarcodeCaptureDeserializerListener", parameters: {
            onModeDeserializationStarted: (deserializer: any, mode: any, json: JSONParseable) => void;
            onModeDeserializationFinished: (deserializer: any, mode: any, json: JSONParseable) => void;
            onSettingsDeserializationStarted: (deserializer: any, settings: any, json: JSONParseable) => void;
            onSettingsDeserializationFinished: (deserializer: any, settings: any, json: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeTrackingDeserializer: new () => CaptureModeDeserializerInstance;
    BarcodeTrackingListener: {
        extend: (target: "BarcodeTrackingListener", parameters: {
            didUpdateSession: (barcode_tracking: any, session: JSONParseable, frame_data: any) => void;
            onTrackedBarcodeTapped: (barcode_tracking: any, tracked_barcode: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    BarcodeTrackingDeserializerListener: {
        extend: (target: "BarcodeTrackingDeserializerListener", parameters: {
            onModeDeserializationStarted: (deserializer: any, mode: any, json: JSONParseable) => void;
            onModeDeserializationFinished: (deserializer: any, mode: any, json: JSONParseable) => void;
            onSettingsDeserializationStarted: (deserializer: any, settings: any, json: JSONParseable) => void;
            onSettingsDeserializationFinished: (deserializer: any, settings: any, json: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    SparkScanDeserializer: new () => CaptureModeDeserializerInstance;
    SparkScanListener: {
        extend: (target: "SparkScanListener", parameters: {
            didScan: (spark_scan: any, session: JSONParseable, frame_data: WasmFrameData) => void;
            didUpdateSession: (spark_scan: any, session: JSONParseable, frame_data: any) => void;
        }) => new () => EmscriptenClassHandle;
    };
    SparkScanDeserializerListener: {
        extend: (target: "SparkScanDeserializerListener", parameters: {
            onModeDeserializationStarted: (deserializer: any, mode: any, json: JSONParseable) => void;
            onModeDeserializationFinished: (deserializer: any, mode: any, json: JSONParseable) => void;
            onSettingsDeserializationStarted: (deserializer: any, settings: any, json: JSONParseable) => void;
            onSettingsDeserializationFinished: (deserializer: any, settings: any, json: JSONParseable) => void;
        }) => new () => EmscriptenClassHandle;
    };
    LicenseUtils: {
        getBlinkIdLicenseKey: (scanditLicense: string) => string;
    };
}
interface Module extends Module$1, BarcodeCaptureModule {
}
type EngineWorkerResponse<C extends DataCaptureActionMessageKey> = WorkerResponse<C> extends Promise<void> | void ? Promise<void> | void : {
    payload: WorkerResponse<C>;
    transferables?: Transferable[];
};

export { AnyDataCaptureActionMessage, BarcodeCaptureDidScanWorkerMessage, BarcodeCaptureDidUpdateSessionWorkerMessage, BarcodeCaptureModule, BarcodeTrackingDidTapTrackedBarcode, DataCaptureActionMessageKey, DataCaptureCallbackMessage, DataCaptureWorker, EngineWorkerResponse, Module, PayloadForCommand, SparkScanDidScanWorkerMessage, SparkScanDidUpdateSessionWorkerMessage, WorkerResponse };
